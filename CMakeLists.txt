cmake_minimum_required(VERSION 3.10)
project(webnoise)

option(SOLARIS "Build for old Solaris targets" OFF)

# generate config.h - most of these options are for liboping
include(CheckIncludeFiles)
include(CheckSymbolExists)
include(CheckCSourceCompiles)
check_symbol_exists(strerror_r string.h HAVE_DECL_STRERROR_R)
check_include_files(dlfcn.h HAVE_DLFCN_H)
check_include_files(fcntl.h HAVE_FCNTL_H)
check_symbol_exists(gettimeofday time.h HAVE_GETTIMEOFDAY)
check_include_files(inttypes.h HAVE_INTTYPES_H)
check_include_files(langinfo.h HAVE_LANGINFO_H)
check_include_files(locale.h HAVE_LOCALE_H)
if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    set(HAVE_MALLOC ON)
else()
    set(HAVE_MALLOC OFF)
endif()
check_include_files(math.h HAVE_MATH_H)
check_include_files(memory.h HAVE_MEMORY_H)
check_symbol_exists(memset stdlib.h HAVE_MEMSET)
check_symbol_exists(modf math.h HAVE_MODF)
check_include_files(ncursesw/curses.h HAVE_NCURSESW_CURSES_H) # pretty sure these ncurses ones don't need to be here for our stripped-down build but i'm keeping it anyways to avoid changing too much
check_include_files(ncursesw.h HAVE_NCURSESW_H)
check_include_files(ncurses/curses.h HAVE_NCURSES_CURSES_H)
check_include_files(ncurses.h HAVE_NCURSES_H)
check_include_files(netdb.h HAVE_NETDB_H)
check_include_files(netinet/icmp6.h HAVE_NETINET_ICMP6_H)
check_include_files(netinet/in.h HAVE_NETINET_IN_H)
check_include_files(netinet/in_systm.h HAVE_NETINET_IN_SYSTM_H)
check_include_files(netinet/ip6.h HAVE_NETINET_IP6_H)
check_include_files(netinet/ip.h HAVE_NETINET_IP_H)
check_include_files(netinet/ip_icmp.h HAVE_NETINET_IP_ICMP_H)
check_include_files(netinet/ip_var.h HAVE_NETINET_IP_VAR_H)
check_symbol_exists(select sys/select.h HAVE_SELECT)
check_include_files(signal.h HAVE_SIGNAL_H)
check_symbol_exists(socket sys/socket.h HAVE_SOCKET)
check_symbol_exists(sqrt math.h HAVE_SQRT)
check_include_files(stdint.h HAVE_STDINT_H)
check_include_files(stdlib.h HAVE_STDLIB_H)
check_symbol_exists(strcasecmp strings.h HAVE_STRCASECMP)
check_symbol_exists(strdup string.h HAVE_STRDUP)
check_symbol_exists(strerror string.h HAVE_STRERROR)
check_symbol_exists(strerror_r string.h HAVE_STRERROR_R)
check_include_files(strings.h HAVE_STRINGS_H)
check_include_files(string.h HAVE_STRING_H)
check_symbol_exists(strncasecmp strings.h HAVE_STRNCASECMP)
check_symbol_exists(strtoul stdlib.h HAVE_STRTOUL)
check_include_files(sys/socket.h HAVE_SYS_SOCKET_H)
if (NOT HAVE_SYS_SOCKET_H)
    check_include_files(winsock2.h HAVE_SYS_SOCKET_H)
endif()
check_include_files(sys/stat.h HAVE_SYS_STAT_H)
check_include_files(sys/time.h HAVE_SYS_TIME_H)
check_include_files(sys/types.h HAVE_SYS_TYPES_H)
check_include_files(unistd.h HAVE_UNISTD_H)
check_c_source_compiles(
"#include <sys/time.h>
#include <time.h>

int main(int c, char **v) { return 0; }"
    TIME_WITH_SYS_TIME
)
if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(WITH_DEBUG ON)
else()
    set(WITH_DEBUG OFF)
endif()
set(_UINT32_T ${SOLARIS})
set(_UINT8_T ${SOLARIS})
set(HAVE_GID_T "int")
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.in ${CMAKE_SOURCE_DIR}/include/config.h)


if (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
    set(WINDOWS ON)
    add_subdirectory(winping)
else()
    set(WINDOWS OFF)
    add_subdirectory(oping)
endif()

add_executable(webnoise webnoise.c wping.c)
target_include_directories(webnoise PRIVATE include)
if(WINDOWS)
    target_link_libraries(webnoise winping)
else()
    target_link_libraries(webnoise oping)
endif()
install(TARGETS webnoise)